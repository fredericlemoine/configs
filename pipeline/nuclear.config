/*
 * -------------------------------------------------
 *  Nextflow config file for running tests
 * -------------------------------------------------
 * Defines bundled input files and everything required
 * to run a fast and simple test. Use as follows:
 * nextflow run nf-core/eager -profile test, docker (or singularity, or conda)
 */

params {

   config_profile_name = 'nf-core/eager nucleaer - human profile'

   config_profile_description = "A simple profile for human nuclear genomes"

   email = 'pluisi@pasteur.fr'
}


process {
   errorStrategy = 'retry'
   maxRetries = 2

   withName:'makeBWAIndex'{
      cpus = { check_max( 8 * task.attempt, 'cpus' ) }
      memory = { check_max( 8.GB * task.attempt, 'memory' ) }
      time = { check_max( 12.h * task.attempt, 'time' ) }
   }
   withName:'adapter_removal'{
      cpus = { check_max( 8 * task.attempt, 'cpus' ) }
      memory = { check_max( 16.GB * task.attempt, 'memory' ) }
      time = { check_max( 12.h * task.attempt, 'time' ) }
   }
   withName:'bwa'{
      cpus = { check_max( 15 * task.attempt, 'cpus' ) }
      memory = { check_max( 16.GB * task.attempt, 'memory' ) }
      time = 24.h 
   }
   withName:'markduplicates'{
      errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
      cpus = { check_max( 8 * task.attempt, 'cpus' ) }
      memory = { check_max( 8.GB * task.attempt, 'memory' ) }
      time = { check_max( 6.h * task.attempt, 'time' ) }
   }
   withName:'damageprofiler'{
      cpus = 1
      memory = { check_max( 8.GB * task.attempt, 'memory' ) }
      time = { check_max( 6.h * task.attempt, 'time' ) }
   }
   withName:'fastp'{
      cpus = 8 
      memory = { check_max( 8.GB * task.attempt, 'memory' ) }
      time = { check_max( 6.h * task.attempt, 'time' ) }
   }
   withName:'fastqc'{
      cpus = 2
      memory = { check_max( 8.GB * task.attempt, 'memory' ) }
      time = { check_max( 6.h * task.attempt, 'time' ) }
   }
}
